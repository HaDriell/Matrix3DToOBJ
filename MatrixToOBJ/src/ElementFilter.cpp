#include "ElementFilter.h"
#include <algorithm>
#include <fstream>
#include <sstream>
#include <iostream>

void ElementFilter::addElement(int id, bool visible, float size, const std::string& name, Vector3 color)
{
    //Fetch if already exist
    ElementProperties* elementProperties = get_element_properties(id);
    
    //Create & Add if not exist
    if (!elementProperties)
    {
        elementProperties = new ElementProperties();
        elements.push_back(elementProperties);
    }

    //Configure element properties
    elementProperties->id = id;
    elementProperties->visible = visible;
    elementProperties->size = size;
    elementProperties->name = name;
    elementProperties->color = color;
}

void ElementFilter::debug()
{
    std::cout << "DEBUG ElementFilter" << std::endl;
    for (auto e : elements)
    {
        std::cout << "Element name    : " << e->name << std::endl;
        std::cout << "Element visible : " << std::to_string(e->visible) << std::endl;
        std::cout << "Element id      : " << e->id << std::endl;
        std::cout << "Element color   : " << e->color.x << " " << e->color.y << " " << e->color.z << std::endl;
        std::cout << "Element size    : " << e->size << std::endl; 
    }
}


void ElementFilter::configure(Properties& properties)
{
    std::string elementListString;
    if (properties.get_string("matrix.elements", elementListString))
    {
        std::stringstream elementStream(elementListString);
        
        std::string elementPrefix;
        while (std::getline(elementStream, elementPrefix, ','))
        {
            int id = 0;
            int visible = 1;
            float size = 1.0f;
            std::string name = elementPrefix;
            Vector3 color;

            properties.get_int(elementPrefix + ".id", id);
            properties.get_int(elementPrefix + ".visible", visible);
            properties.get_float(elementPrefix + ".size", size);
            properties.get_string(elementPrefix + ".name", name);
            properties.get_Vector3(elementPrefix + ".color", color);

            addElement(id, (bool) visible, size, name, color);
        }
    }
    //TODO : read the properties to generate new elements from configuration
}

void ElementFilter::save(const std::string& filename)
{
    std::ofstream out;
    out.open(filename);

    if (out.is_open())
    {
        out << "#Generated by MatrixToOBJ" << std::endl;

        for (auto e : elements)
        {
            out << "newmtl " << e->name << std::endl;
            out << "Ka " << e->color.x << " " << e->color.y << " " << e->color.z << std::endl;
            out << "Kd " << e->color.x << " " << e->color.y << " " << e->color.z << std::endl;
            out << "Ks 0.5 0.5 0.5" << std::endl;
            out << "Ke 0 0 0 " << std::endl;
            out << "Ni 1" << std::endl;
            out << "Ns 10" << std::endl;
            out << "illum 2" << std::endl;
            out << std::endl;
        }
    }
}


ElementProperties* ElementFilter::get_element_properties(int id)
{
    auto it = std::find_if(elements.begin(), elements.end(), [=](auto e) {
        return e->id == id;
    });

    if (it != elements.end())
    {
        return *it;
    }
    
    return nullptr;
}